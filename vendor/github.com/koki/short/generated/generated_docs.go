// Code generated by go-bindata.
// sources:
// ../generated/pod.txt
// DO NOT EDIT!

package generated

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _GeneratedPodTxt = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x54\xc1\x8e\xe3\x44\x10\xbd\xf7\x57\x94\xf6\xc2\x25\x18\x06\x38\xa0\xb9\x8d\x46\x1c\x46\x41\x30\x12\x2b\x2e\x08\xa1\x4a\x77\x79\xdc\xa4\xdd\x65\x75\x55\x3b\xe3\xbf\x47\xd5\x4e\x06\x67\x77\x51\xe6\x42\x4e\xb6\xf3\xba\xea\xbd\x7a\xaf\xda\xc1\x97\x7f\xcf\x1c\xe0\x91\xf3\x4c\x45\x22\xe7\xf5\x31\x6b\xe4\x2c\xce\x3d\x1c\x44\x0b\x7a\x75\x76\xf8\xe3\x10\x05\x02\xfb\x3a\x52\x56\x98\x0a\xcf\x31\x90\x80\x0e\x04\x81\x14\x63\x12\xe0\xbe\xbd\xfa\x7f\xcb\x8d\xe4\x07\xcc\x51\x46\xb1\x12\x07\xd2\x13\x51\x86\x7d\x3d\x50\xc9\xa4\x24\xad\xbd\x2c\x59\xf1\x15\x30\x07\xd8\xf3\x31\xc2\x6f\x03\x17\x3d\x7f\x75\xee\x23\x1e\x12\x59\xe9\x47\xce\x4a\x59\xa5\xb1\xb9\xeb\x00\x9e\xb2\x16\x0e\xd5\x1b\x5b\xfb\xf6\x5d\x07\x5b\x29\x7d\xe1\x71\xdb\x4a\xb9\x95\x37\xe4\xf7\x5f\x42\x5a\x6b\xc3\xbc\x9d\x30\xe4\x0f\x1d\xc0\x4f\xaf\x38\x4e\x69\x7d\x7f\xa8\x3a\x70\xf9\x4a\xe0\x21\x84\x42\x22\xce\x7d\xc6\xa4\xc1\x9a\xb0\xb8\x8e\xa7\xe6\xa8\x26\x80\x5e\xc9\x57\x83\xc0\x69\xa0\x0c\x55\x62\x7e\x69\x80\xeb\x96\x5c\xfc\x40\x36\x78\xe5\x62\xb5\xd5\xea\x04\xea\x63\xa6\x00\x31\xb7\x13\x38\x45\x78\x29\x5c\x27\xf0\x5c\xe8\x9b\xd9\x48\x34\x83\xce\x92\x5a\x9d\xfe\x6a\x9c\x75\x9a\xb8\xa8\x00\xa6\x04\x33\xa6\x18\x1a\xc5\x56\x37\x36\xbf\xdb\x81\x2b\x26\xbf\xaf\xc5\x04\xfe\x98\xef\xba\x6f\xe1\x6b\x98\xef\xba\x1f\xff\x74\xe7\x28\xfd\xc2\x10\x50\xd1\xd8\x25\x16\x5d\x45\xad\xde\xab\x29\xbb\xb8\x7d\x34\x12\x66\xee\x71\xe3\xc5\x32\x91\x38\xf7\x4e\xc7\xd6\xf8\x6d\xe7\x04\x0f\xcf\x4f\xf0\xeb\xe1\x6f\xf2\x0a\x3d\x97\x26\x65\x40\x01\x84\x63\xb4\x18\xd1\x02\x3a\xa0\x02\xa6\x13\x2e\x02\x85\x7a\x2a\x4d\x92\xb2\x89\xaf\x04\x1f\x9e\x39\x7c\xb8\x4c\x2d\xe6\x9e\xcb\x88\xcd\x9b\x68\xf0\x50\x73\xc0\xac\x3b\x90\x98\xfd\xa7\x06\x4d\x58\x84\x8a\x40\x0c\xb6\x29\xfd\xd2\x1c\x31\x45\xbb\x26\xf3\xbc\x1a\x50\x05\x4e\x51\x87\xf6\xaf\xf1\xe3\x46\x77\xd7\x58\x0c\x54\xa8\xe7\x42\xa0\xd6\x7e\x6f\x9c\xfb\x48\x29\xac\xdd\x47\x9e\x57\xab\xf7\x97\xd1\xc5\x2c\x4a\x18\x00\x21\xd3\x09\x94\x27\xab\x92\x68\xa6\x04\x47\x5a\xc0\x63\x4a\x14\x60\x5a\x33\x57\x85\x82\x09\x0d\x94\x59\x09\xd0\xbe\x77\xe7\x58\x6e\x3c\x98\x3e\xb1\x3f\x31\x1f\x05\x52\x3c\x92\xfb\xaf\xcb\xe2\xf2\xc3\x29\x9e\xb3\x71\x0f\xf3\xdd\x2d\xb4\x59\x72\x6f\xed\x6e\x01\x47\x52\xb4\x48\xdd\xdf\x02\x02\x64\x1c\xa9\xd5\xfc\xcb\x9e\x6e\xe1\xbb\xee\x4d\xbf\x4d\xf4\x5a\x39\x9c\x4a\x54\x7d\x5b\xc8\xed\xed\x03\x27\xae\x29\xb4\xc9\xbc\x6f\x30\x13\x87\xff\x8f\xbc\xc0\xc2\x15\x3c\x66\x10\xa2\x5d\x0b\x17\x57\x85\x17\xd2\xb6\x6f\x31\x2b\xb7\xb0\x8d\xb6\x8d\x96\x61\xaf\x71\x26\x8b\xab\xca\xee\x32\xff\xad\xe3\xf1\xbc\x9c\xb2\x95\x8c\xa9\x10\x86\x65\x15\xed\x13\x61\xa6\xd2\x39\xf7\xce\x2b\xd3\x5d\x5d\x98\xee\xf3\xeb\x12\x00\x1e\x11\xc5\x63\x20\xf8\x19\x0f\xb2\x83\xa7\xec\x3b\xe7\xfe\x09\x00\x00\xff\xff\x10\x61\x44\x8c\xa0\x06\x00\x00")

func GeneratedPodTxtBytes() ([]byte, error) {
	return bindataRead(
		_GeneratedPodTxt,
		"../generated/pod.txt",
	)
}

func GeneratedPodTxt() (*asset, error) {
	bytes, err := GeneratedPodTxtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "../generated/pod.txt", size: 1696, mode: os.FileMode(420), modTime: time.Unix(1510718106, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"../generated/pod.txt": GeneratedPodTxt,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"..": &bintree{nil, map[string]*bintree{
		"generated": &bintree{nil, map[string]*bintree{
			"pod.txt": &bintree{GeneratedPodTxt, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

